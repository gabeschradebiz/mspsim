param(
    [Parameter(Mandatory=$false)]
    [ValidatePattern('^[A-Za-z]$')]
    [string]$drive_letter
)

$ErrorActionPreference = 'Stop'
try {
    $baseKey = 'HKLM:\SOFTWARE\CloudLabs\HelpdeskSim\BadMapping'
    $storedDrive = (Get-ItemProperty -Path $baseKey -Name 'DriveLetter' -ErrorAction SilentlyContinue).DriveLetter
    if ([string]::IsNullOrWhiteSpace($drive_letter)) { $drive_letter = if ($storedDrive) { $storedDrive } else { 'X' } }
    $drive_letter = $drive_letter.ToUpper()

    $bad_unc = (Get-ItemProperty -Path $baseKey -Name 'BadUNC' -ErrorAction SilentlyContinue).BadUNC
    if (-not $bad_unc) {
        # Best-effort fallback: try to read any current RemotePath for this drive
        $bad_unc = ''
        $sidKeys = Get-ChildItem -Path Registry::HKEY_USERS -ErrorAction SilentlyContinue | Where-Object { $_.Name -match 'S-1-5-21-' }
        foreach ($sidKey in $sidKeys) {
            $sid = Split-Path $sidKey.Name -Leaf
            $networkKey = "Registry::HKEY_USERS\$sid\Network\$drive_letter"
            if (Test-Path $networkKey) {
                $rp = (Get-ItemProperty -Path $networkKey -ErrorAction SilentlyContinue).RemotePath
                if ($rp) { $bad_unc = $rp; break }
            }
        }
    }

    $offenders = @()
    $sidKeys = Get-ChildItem -Path Registry::HKEY_USERS -ErrorAction SilentlyContinue | Where-Object { $_.Name -match 'S-1-5-21-' }
    foreach ($sidKey in $sidKeys) {
        $sid = Split-Path $sidKey.Name -Leaf
        $networkKey = "Registry::HKEY_USERS\$sid\Network\$drive_letter"
        if (Test-Path $networkKey) {
            $rp = (Get-ItemProperty -Path $networkKey -ErrorAction SilentlyContinue).RemotePath
            if ($rp -and $bad_unc -and ($rp.Trim().ToLower() -eq $bad_unc.Trim().ToLower())) {
                $offenders += @{ hive = $sid; remote_path = $rp }
            }
        }
    }

    $runKey = 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run'
    $valueName = "BadMap_$drive_letter"
    $run_value_present = $false
    try {
        $null = Get-ItemProperty -Path $runKey -Name $valueName -ErrorAction Stop
        $run_value_present = $true
    } catch { $run_value_present = $false }

    $pass = (($offenders.Count -eq 0) -and (-not $run_value_present))

    $output = @{
        pass = $pass
        measured_values = @{
            drive_letter = $drive_letter
            bad_unc = [string]$bad_unc
            found_mappings = [int]$offenders.Count
            run_value_present = [bool]$run_value_present
            details = @()
        }
        notes = if ($pass) {
            "Validation passed: no '$drive_letter:' mapping to target UNC and autorun entry removed."
        } else {
            "Validation failed: mappings or autorun remain."
        }
    }

    foreach ($o in $offenders) {
        $output.measured_values.details += @{
            hive = [string]$o.hive
            remote_path = [string]$o.remote_path
        }
    }

    $json = $output | ConvertTo-Json -Depth 6 -Compress
    [Console]::Out.WriteLine($json)
    exit 0
}
catch {
    $fail = @{
        pass = $false
        measured_values = @{
            drive_letter = if ($drive_letter) { $drive_letter } else { '' }
            bad_unc = ''
            found_mappings = 0
            run_value_present = $false
            details = @()
        }
        notes = "Validation error: $($_.Exception.Message)"
    } | ConvertTo-Json -Depth 6 -Compress
    [Console]::Out.WriteLine($fail)
    exit 0
}
