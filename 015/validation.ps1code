[CmdletBinding()]
param(
  [string]$InterfaceAlias = "",
  [string]$DcIPv4 = ""
)
$ErrorActionPreference = 'SilentlyContinue'
function Get-DCIPv4 {
    param([string]$Override)
    if ($Override) { return $Override }
    $dcHost = ($env:LOGONSERVER -replace '^\\\\','')
    $domain = $env:USERDNSDOMAIN
    $candidates = @()
    if ($dcHost) {
        if ($domain) { $candidates += "$dcHost.$domain" }
        $candidates += $dcHost
    }
    foreach ($h in $candidates) {
        try {
            $rec = Resolve-DnsName -Name $h -Type A -ErrorAction Stop | Where-Object {$_.Type -eq 'A'} | Select-Object -First 1
            if ($rec) { return $rec.IPAddress }
        } catch {}
    }
    if ($domain) {
        $nl = nltest /dsgetdc:$domain 2>$null
        $m = ($nl | Select-String -Pattern 'Address:\s+\\?([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)' -AllMatches)
        if ($m -and $m.Matches.Count -gt 0) { return $m.Matches[0].Groups[1].Value }
    }
    return ""
}
function Get-PrimaryAdapter {
    param([string]$Alias)
    if ($Alias -and (Get-NetAdapter -Name $Alias -ErrorAction SilentlyContinue)) {
        return Get-NetAdapter -Name $Alias
    }
    return (Get-NetAdapter | Where-Object {$_.Status -eq 'Up'} | Sort-Object -Property ifIndex | Select-Object -First 1)
}
try {
    $if = Get-PrimaryAdapter -Alias $InterfaceAlias
    $ifaceIdx = if ($if) { $if.IfIndex } else { $null }
    $dhcpEnabled = $false
    $ipv4Cur = ""
    if ($ifaceIdx) {
        $dhcpEnabled = ((Get-NetIPInterface -InterfaceIndex $ifaceIdx -AddressFamily IPv4).Dhcp -eq 'Enabled')
        $ipRec = Get-NetIPAddress -InterfaceIndex $ifaceIdx -AddressFamily IPv4 -ErrorAction SilentlyContinue | Select-Object -First 1
        if ($ipRec) { $ipv4Cur = $ipRec.IPAddress }
    }
    $dcIP = Get-DCIPv4 -Override $DcIPv4
    $pingOK = $false
    if ($dcIP) {
        try { $pingOK = Test-Connection -ComputerName $dcIP -Count 1 -Quiet } catch { $pingOK = $false }
    }
    $passCond = ($dhcpEnabled -and $ipv4Cur -ne $dcIP -and $pingOK)
    $result = [ordered]@{
        pass = [bool]$passCond
        measured_values = [ordered]@{
            dhcp_enabled = [bool]$dhcpEnabled
            ipv4_address = "$ipv4Cur"
            dc_ipv4 = "$dcIP"
            ping_dc = [bool]$pingOK
        }
        notes = (if ($passCond) { "NIC is using DHCP, client IP differs from DC, and DC is reachable." } else { "NIC DHCP=$dhcpEnabled, clientIP=$ipv4Cur, dcIP=$dcIP, pingDC=$pingOK; expected DHCP enabled, different IP than DC, and reachable DC." })
    }
    $result | ConvertTo-Json -Compress -Depth 5
} catch {
    $result = [ordered]@{
        pass = $false
        measured_values = [ordered]@{
            dhcp_enabled = $false
            ipv4_address = ""
            dc_ipv4 = ""
            ping_dc = $false
        }
        notes = "validation_error: $($_.ToString())"
    }
    $result | ConvertTo-Json -Compress -Depth 5
}
