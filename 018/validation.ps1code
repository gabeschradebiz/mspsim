[CmdletBinding()]
param(
  [Parameter(Mandatory=$false)]
  [ValidatePattern('^(\d{1,3}\.){3}\d{1,3}$')]
  [string]$expectedDnsServer = '10.0.0.4',

  [Parameter(Mandatory=$false)]
  [ValidatePattern('^[A-Za-z0-9.-]+\.[A-Za-z]{2,}$')]
  [string]$testFqdn = 'intranet.corp.contoso.com',

  [Parameter(Mandatory=$false)]
  [ValidatePattern('^(\d{1,3}\.){3}\d{1,3}$')]
  [string]$expectedResourceIp = '10.0.0.4'
)
$ErrorActionPreference = 'Stop'

# Collect current DNS servers on primary active adapter
$currentDns = @()
try {
    $primaryAdapter = Get-NetAdapter | Where-Object {
        $_.Status -eq 'Up' -and $_.InterfaceOperationalStatus -eq 'Up' -and
        $_.Name -notlike 'vEthernet*' -and $_.Name -notlike '*Virtual*'
    } | Sort-Object -Property ifIndex | Select-Object -First 1

    if ($primaryAdapter) {
        $currentDns = (Get-DnsClientServerAddress -InterfaceIndex $primaryAdapter.ifIndex -AddressFamily IPv4).ServerAddresses
    }
} catch { }

# Attempt resolution of the test FQDN
$resolvedIps = @()
try {
    $res = Resolve-DnsName -Name $testFqdn -Type A -ErrorAction Stop
    $resolvedIps = ($res | Where-Object { $_.Type -eq 'A' }).IPAddress
} catch { }

# Determine pass/fail
$dnsOk = $currentDns -contains $expectedDnsServer
$dnsResOk = $resolvedIps -contains $expectedResourceIp
$pass = $dnsOk -and $dnsResOk

$result = [ordered]@{
    pass = [bool]$pass
    measured_values = @{
        current_dns_servers = @($currentDns)
        resolved_ips = @($resolvedIps)
        expectedDnsServer = $expectedDnsServer
        expectedResourceIp = $expectedResourceIp
        testFqdn = $testFqdn
    }
    notes = if ($pass) {
        "DNS server is set to $expectedDnsServer and $testFqdn resolves to $expectedResourceIp."
    } else {
        "Expected DNS $expectedDnsServer and resolution of $testFqdn to $expectedResourceIp; actual DNS: $($currentDns -join ','); resolved IPs: $($resolvedIps -join ',')."
    }
}

$result | ConvertTo-Json -Depth 4 -Compress
