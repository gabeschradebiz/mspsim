$ErrorActionPreference = 'Stop'
$ProgressPreference = 'SilentlyContinue'
 
function Get-ActiveAdapter {
    Get-NetAdapter | Where-Object { $.Status -eq 'Up' -and $.HardwareInterface -and $.Name -notlike 'vEthernet*' } | Select-Object -First 1
}
 
try {
    $nic = Get-ActiveAdapter
    if (-not $nic) { throw "No active physical adapter found." }
 
    $dnsInfo = Get-DnsClientServerAddress -InterfaceIndex $nic.InterfaceIndex -AddressFamily IPv4
    $servers = @()
    if ($dnsInfo -and $dnsInfo.ServerAddresses) { $servers = [string[]]$dnsInfo.ServerAddresses }
 
    $primary = $null
    if ($servers.Count -gt 0) { $primary = $servers[0] }
 
    $primaryReachable = $false
    if ($primary) {
        try {
            $primaryReachable = [bool](Test-NetConnection -ComputerName $primary -Port 53 -InformationLevel Quiet -WarningAction SilentlyContinue)
        } catch { $primaryReachable = $false }
    }
 
    # Try resolving the domain using current DNS configuration
    $domain = $env:USERDNSDOMAIN
    if ([string]::IsNullOrWhiteSpace($domain)) {
        $domain = (Get-CimInstance -ClassName Win32_ComputerSystem).Domain
    }
    $domainResolves = $false
    if (-not [string]::IsNullOrWhiteSpace($domain)) {
        try {
            $null = Resolve-DnsName -Name $domain -ErrorAction Stop
            $domainResolves = $true
        } catch { $domainResolves = $false }
    }
 
    $addressOrigin = if ($dnsInfo) { [string]$dnsInfo.AddressOrigin } else { '' }
 
    # Pass if DNS is from DHCP OR if primary DNS is reachable and domain resolves, and bad test IP is not primary
    $badPrimary = '192.0.2.53'
    $pass = $false
    if ($addressOrigin -eq 'Dhcp') {
        $pass = $true
    } elseif ($primary -and $primary -ne $badPrimary -and $primaryReachable -and $domainResolves) {
        $pass = $true
    } else {
        $pass = $false
    }
 
    $notes = if ($pass) {
        "DNS is correctly configured (AddressOrigin=$addressOrigin; primary reachable=$primaryReachable; domainResolves=$domainResolves)."
    } else {
        "DNS misconfiguration persists (AddressOrigin=$addressOrigin; primary='$primary'; primaryReachable=$primaryReachable; domainResolves=$domainResolves). Ensure DHCP or correct domain DNS is primary."
    }
 
    $output = [ordered]@{
        pass = $pass
        measured_values = [ordered]@{
            adapter_name = $nic.Name
            address_origin = $addressOrigin
            dns_servers = $servers
            primary_dns_reachable = [bool]$primaryReachable
            domain_resolves = [bool]$domainResolves
        }
        notes = $notes
    } | ConvertTo-Json -Compress
    Write-Output $output
}
catch {
    $out = [ordered]@{
        pass = $false
        measured_values = [ordered]@{
            adapter_name = ""
            address_origin = ""
            dns_servers = @()
            primary_dns_reachable = $false
            domain_resolves = $false
        }
        notes = ("Validation error: " + (($ | Out-String).Trim()))
    } | ConvertTo-Json -Compress
    Write-Output $out
    exit 1
}
