$ErrorActionPreference = 'Stop'
$ProgressPreference = 'SilentlyContinue'
try {
    # Find domain
    $cs = Get-CimInstance -ClassName Win32_ComputerSystem
    $domain = $cs.Domain
    if ([string]::IsNullOrWhiteSpace($domain) -or $domain -eq 'WORKGROUP') {
        throw "Client is not domain-joined; domain not found."
    }
 
    # Discover a DC and its IP while DNS still works
    $nl = nltest /dsgetdc:$domain 2>&1
    if ($LASTEXITCODE -ne 0) {
        throw "nltest failed to discover DC for $domain"
    }
    $match = ($nl | Select-String -Pattern 'Address:\s*\?([0-9.]+)') | Select-Object -First 1
    if (-not $match -or -not $match.Matches[0].Groups[1].Value) {
        throw "Unable to parse DC IP from nltest output."
    }
    $dcIp = $match.Matches[0].Groups[1].Value
 
    # Pick active physical adapter
    $nic = Get-NetAdapter | Where-Object { $.Status -eq 'Up' -and $.HardwareInterface -and $.Name -notlike 'vEthernet*' } | Select-Object -First 1
    if (-not $nic) { throw "No active physical network adapter found." }
 
    # Apply broken state: unreachable primary, DC secondary
    $badPrimary = '192.0.2.53' # TEST-NET-1 RFC5737 (non-routable in lab)
    Set-DnsClientServerAddress -InterfaceIndex $nic.InterfaceIndex -ServerAddresses @($badPrimary, $dcIp)
 
    # Verify application
    $applied = (Get-DnsClientServerAddress -InterfaceIndex $nic.InterfaceIndex -AddressFamily IPv4).ServerAddresses
    if ($applied.Count -lt 2 -or $applied[0] -ne $badPrimary -or $applied[1] -ne $dcIp) {
        throw "DNS servers not applied as expected."
    }
 
    Write-Output "status=ok"
    exit 0
}
catch {
    Write-Error ("error=" + ($ | Out-String).Trim())
    exit 1
}  
